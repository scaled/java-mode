name: Java
scopeName: source.java
foldStart: (\{\s*(//.*)?$|^\s*// \{\{\{)
foldStop: ^\s*(\}|// \}\}\}$)
repository:
 all-types:
  include: #primitive-arrays
  include: #primitive-types
  include: #object-types
 annotations:
  multi:
   name: meta.declaration.annotation.java
   begin: (@[^ (]+)(\()
   bcaps: 1=storage.type.annotation.java 2=punctuation.definition.annotation-arguments.begin.java
   end: (\))
   ecaps: 1=punctuation.definition.annotation-arguments.end.java
   patterns:
    single:
     pattern: (\w*)\s*(=)
     caps: 1=constant.other.key.java 2=keyword.operator.assignment.java
    include: #code
    single:
     name: punctuation.seperator.property.java
     pattern: ,
  single:
   name: storage.type.annotation.java
   pattern: @\w*
 anonymous-classes-and-new:
  multi:
   begin: \bnew\b
   bcaps: 0=keyword.control.new.java
   end: (?<=\)|\])(?!\s*\{)|(?<=})|(?=;)
   patterns:
    multi:
     begin: (\w+)\s*(?=\[)
     bcaps: 1=storage.type.java
     end: }|(?=;|\))
     patterns:
      multi:
       begin: \[
       end: \]
       patterns:
        include: #code
      multi:
       begin: \{
       end: (?=})
       patterns:
        include: #code
    multi:
     begin: (?=\w.*\()
     end: (?<=\))
     patterns:
      include: #object-types
      multi:
       begin: \(
       end: \)
       patterns:
        include: #code
    multi:
     name: meta.inner-class.java
     begin: \{
     end: }
     patterns:
      include: #class-body
 assertions:
  multi:
   name: meta.declaration.assertion.java
   begin: \b(assert)\s
   bcaps: 1=keyword.control.assert.java
   end: $
   patterns:
    single:
     name: keyword.operator.assert.expression-seperator.java
     pattern: :
    include: #code
 class:
  multi:
   name: meta.class.java
   begin: (?=\w?[\w\s]*(?:class|(?:@)?interface|enum)\s+\w+)
   end: }
   ecaps: 0=punctuation.section.class.end.java
   patterns:
    include: #storage-modifiers
    include: #comments
    single:
     name: meta.class.identifier.java
     pattern: (class|(?:@)?interface|enum)\s+(\w+)
     caps: 1=storage.modifier.java 2=entity.name.type.class.java
    multi:
     name: meta.definition.class.inherited.classes.java
     begin: extends
     bcaps: 0=storage.modifier.extends.java
     end: (?=\{|implements)
     patterns:
      include: #object-types-inherited
      include: #comments
    multi:
     name: meta.definition.class.implemented.interfaces.java
     begin: (implements)\s
     bcaps: 1=storage.modifier.implements.java
     end: (?=\s*extends|\{)
     patterns:
      include: #object-types-inherited
      include: #comments
    multi:
     name: meta.class.body.java
     begin: \{
     end: (?=})
     patterns:
      include: #class-body
 class-body:
  include: #comments
  include: #class
  include: #enums
  include: #methods
  include: #storage-modifiers
  include: #code
 code:
  include: #comments
  include: #annotations
  include: #class
  multi:
   begin: \{
   end: }
   patterns:
    include: #code
  include: #assertions
  include: #parens
  include: #constants-and-special-vars
  include: #anonymous-classes-and-new
  include: #keywords
  include: #storage-modifiers
  include: #strings
  include: #all-types
 comments:
  single:
   name: comment.block.empty.java
   pattern: /\*\*/
   caps: 0=punctuation.definition.comment.java
  include: text.html.javadoc
  include: #comments-inline
 comments-inline:
  multi:
   name: comment.block.java
   begin: /\*
   bcaps: 0=punctuation.definition.comment.java
   end: \*/
   ecaps: 0=punctuation.definition.comment.java
  single:
   pattern: \s*((//).*$\n?)
   caps: 1=comment.line.double-slash.java 2=punctuation.definition.comment.java
 constants-and-special-vars:
  single:
   name: constant.language.java
   pattern: \b(true|false|null)\b
  single:
   name: variable.language.java
   pattern: \b(this|super)\b
  single:
   name: constant.numeric.java
   pattern: \b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\b
  single:
   name: constant.other.java
   pattern: (\.)?\b([A-Z][A-Z0-9_]+)(?!<|\.class|\s*\w+\s*=)\b
   caps: 1=keyword.operator.dereference.java
 enums:
  multi:
   begin: ^(?=\s*[A-Z0-9_]+\s*(\{|\(|,))
   end: (?=;|})
   patterns:
    multi:
     name: meta.enum.java
     begin: \w+
     bcaps: 0=constant.other.enum.java
     end: (?=,|;|})
     patterns:
      include: #parens
      multi:
       begin: \{
       end: }
       patterns:
        include: #class-body
 keywords:
  single:
   name: keyword.control.catch-exception.java
   pattern: \b(try|catch|finally|throw)\b
  single:
   name: keyword.control.java
   pattern: \?|:
  single:
   name: keyword.control.java
   pattern: \b(return|break|case|continue|default|do|while|for|switch|if|else)\b
  single:
   name: keyword.operator.java
   pattern: \b(instanceof)\b
  single:
   name: keyword.operator.comparison.java
   pattern: (==|!=|<=|>=|<>|<|>)
  single:
   name: keyword.operator.assignment.java
   pattern: (=)
  single:
   name: keyword.operator.increment-decrement.java
   pattern: (\-\-|\+\+)
  single:
   name: keyword.operator.arithmetic.java
   pattern: (\-|\+|\*|\/|%)
  single:
   name: keyword.operator.logical.java
   pattern: (!|&&|\|\|)
  single:
   name: keyword.operator.dereference.java
   pattern: (?<=\S)\.(?=\S)
  single:
   name: punctuation.terminator.java
   pattern: ;
 methods:
  multi:
   name: meta.method.java
   begin: (?!new)(?=\w.*\s+)(?=[^=]+\()
   end: }|(?=;)
   patterns:
    include: #storage-modifiers
    multi:
     name: meta.method.identifier.java
     begin: (\w+)\s*\(
     bcaps: 1=entity.name.function.java
     end: \)
     patterns:
      include: #parameters
    multi:
     name: meta.method.return-type.java
     begin: (?=\w.*\s+\w+\s*\()
     end: (?=\w+\s*\()
     patterns:
      include: #all-types
    include: #throws
    multi:
     name: meta.method.body.java
     begin: \{
     end: (?=})
     patterns:
      include: #code
 object-types:
  multi:
   begin: \b((?:[a-z]\w*\.)*[A-Z]+\w*)<
   bcaps: 1=storage.type.generic.java
   end: >|[^\w\s,\?<\[\]]
   patterns:
    include: #object-types
    multi:
     name: storage.type.generic.java
     begin: <
     end: >|[^\w\s,\[\]<]
  multi:
   name: storage.type.object.array.java
   begin: \b((?:[a-z]\w*\.)*[A-Z]+\w*)(?=\[)
   end: (?=[^\]\s])
   patterns:
    multi:
     begin: \[
     end: \]
     patterns:
      include: #code
  single:
   name: storage.type.java
   pattern: \b(?:[a-z]\w*(\.))*[A-Z]+\w*\b
   caps: 1=keyword.operator.dereference.java
 object-types-inherited:
  multi:
   name: entity.other.inherited-class.java
   begin: \b((?:[a-z]\w*\.)*[A-Z]+\w*)<
   end: >|[^\w\s,<]
   patterns:
    include: #object-types
    multi:
     name: storage.type.generic.java
     begin: <
     end: >|[^\w\s,<]
  single:
   name: entity.other.inherited-class.java
   pattern: \b(?:[a-z]\w*(\.))*[A-Z]+\w*
   caps: 1=keyword.operator.dereference.java
 parameters:
  single:
   name: storage.modifier.java
   pattern: final
  include: #primitive-arrays
  include: #primitive-types
  include: #object-types
  single:
   name: variable.parameter.java
   pattern: \w+
 parens:
  multi:
   begin: \(
   end: \)
   patterns:
    include: #code
 primitive-arrays:
  single:
   name: storage.type.primitive.array.java
   pattern: \b(?:void|boolean|byte|char|short|int|float|long|double)(\[\])+\b
 primitive-types:
  single:
   name: storage.type.primitive.java
   pattern: \b(?:void|boolean|byte|char|short|int|float|long|double)\b
 storage-modifiers:
  single:
   pattern: \b(public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient)\b
   caps: 1=storage.modifier.java
 strings:
  multi:
   name: string.quoted.double.java
   begin: "
   bcaps: 0=punctuation.definition.string.begin.java
   end: "
   ecaps: 0=punctuation.definition.string.end.java
   patterns:
    single:
     name: constant.character.escape.java
     pattern: \\.
  multi:
   name: string.quoted.single.java
   begin: '
   bcaps: 0=punctuation.definition.string.begin.java
   end: '
   ecaps: 0=punctuation.definition.string.end.java
   patterns:
    single:
     name: constant.character.escape.java
     pattern: \\.
 throws:
  multi:
   name: meta.throwables.java
   begin: throws
   bcaps: 0=storage.modifier.java
   end: (?=\{|;)
   patterns:
    include: #object-types
 values:
  include: #strings
  include: #object-types
  include: #constants-and-special-vars
patterns:
 single:
  name: meta.package.java
  pattern: ^\s*(package)\b(?:\s*([^ ;$]+)\s*(;)?)?
  caps: 1=keyword.other.package.java 2=storage.modifier.package.java 3=punctuation.terminator.java
 single:
  name: meta.import.java
  pattern: ^\s*(import)\b(?:\s*([^ ;$]+)\s*(;)?)?
  caps: 1=keyword.other.import.java 2=storage.modifier.import.java 3=punctuation.terminator.java
 include: #code
